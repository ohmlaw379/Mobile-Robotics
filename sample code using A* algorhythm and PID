#include "Servo.h"
#include <queue>
#include <vector>
#include <cmath>

// Motors
Servo motor1; // Left motor
Servo motor2; // Right motor

// Ultrasonic Sensors
const int Trig_pin = 5;  // Trigger pin for the ultrasonic sensor
const int Echo_pin = 6;  // Echo pin for the ultrasonic sensor
long duration;

// Motor Pins
const int Motor1Pin = 9; // Left motor pin
const int Motor2Pin = 10; // Right motor pin

// PID Constants
float kp = 1.0;
float ki = 0.0;
float kd = 0.5;
float error = 0, prev_error = 0, integral = 0;

// Robot direction: 0=Up, 1=Right, 2=Down, 3=Left
int robotDirection = 2;

// Robot position
int xcoordinate = 2;
int ycoordinate = 1;

// Grid map (1=Obstacle, 0=Free space)
int arraything[6][6] = {
    {1, 1, 1, 1, 1, 1},
    {1, 1, 0, 1, 0, 1},
    {1, 1, 0, 1, 0, 1},
    {1, 1, 0, 1, 0, 1},
    {1, 1, 0, 1, 1, 1},
    {1, 1, 1, 0, 1, 1}
};

// Target destination (change as needed)
int targetX = 4;
int targetY = 3;

// A* algorithm node structure
struct Node {
    int x, y;
    float cost, priority;
    bool operator<(const Node &other) const { return priority > other.priority; }
};

// Function prototypes
void setupMotors();
void moveForward();
void turnLeft();
void turnRight();
void turnAround();
void pidControl(float targetSpeed);
void obstacleAvoidance();
std::vector<std::pair<int, int>> aStarPathfinding(int startX, int startY, int goalX, int goalY);
float heuristic(int x1, int y1, int x2, int y2);
boolean isFrontOpen();
void navigatePath(std::vector<std::pair<int, int>> &path);

void setup() {
    Serial.begin(9600);
    setupMotors();
    Serial.println("Starting Navigation...");
}

void loop() {
    // Calculate the path using A*
    std::vector<std::pair<int, int>> path = aStarPathfinding(xcoordinate, ycoordinate, targetX, targetY);

    // Follow the calculated path
    navigatePath(path);

    // Stop the robot at the destination
    motor1.write(90); // Stop motors
    motor2.write(90);
    while (true) {
        Serial.println("Destination reached!");
        delay(1000);
    }
}

// Initialize motors
void setupMotors() {
    motor1.attach(Motor1Pin);
    motor2.attach(Motor2Pin);
    motor1.write(90);
    motor2.write(90);
}

// Move forward
void moveForward() {
    motor1.write(120); // Forward speed for left motor
    motor2.write(60);  // Forward speed for right motor
    delay(1000);

    // Update position based on direction
    if (robotDirection == 0) ycoordinate--;
    if (robotDirection == 1) xcoordinate++;
    if (robotDirection == 2) ycoordinate++;
    if (robotDirection == 3) xcoordinate--;
}

// Turn left
void turnLeft() {
    motor1.write(60);
    motor2.write(60);
    delay(350); // Adjust for a 90° turn
    motor1.write(90);
    motor2.write(90);

    // Update direction
    robotDirection = (robotDirection + 3) % 4; // Rotate counterclockwise
}

// Turn right
void turnRight() {
    motor1.write(120);
    motor2.write(120);
    delay(350); // Adjust for a 90° turn
    motor1.write(90);
    motor2.write(90);

    // Update direction
    robotDirection = (robotDirection + 1) % 4; // Rotate clockwise
}

// Turn around
void turnAround() {
    turnRight();
    turnRight();
}

// PID control for motor speed
void pidControl(float targetSpeed) {
    error = targetSpeed - duration; // Error between target and actual
    integral += error;
    float derivative = error - prev_error;
    float output = kp * error + ki * integral + kd * derivative;

    // Apply output to motors
    motor1.write(90 + output);
    motor2.write(90 - output);

    prev_error = error;
}

// Detect obstacles using ultrasonic sensors
void obstacleAvoidance() {
    digitalWrite(Trig_pin, LOW);
    delayMicroseconds(2);
    digitalWrite(Trig_pin, HIGH);
    delayMicroseconds(10);
    digitalWrite(Trig_pin, LOW);

    duration = pulseIn(Echo_pin, HIGH);

    // If obstacle detected within 30 cm
    if (duration < 3000) {
        turnLeft(); // Turn left to avoid
    }
}

// A* pathfinding
std::vector<std::pair<int, int>> aStarPathfinding(int startX, int startY, int goalX, int goalY) {
    std::priority_queue<Node> openSet;
    openSet.push({startX, startY, 0, heuristic(startX, startY, goalX, goalY)});

    std::vector<std::vector<bool>> closedSet(6, std::vector<bool>(6, false));
    std::vector<std::vector<int>> cameFrom(6, std::vector<int>(6, -1));
    std::vector<std::vector<float>> costSoFar(6, std::vector<float>(6, INFINITY));
    costSoFar[startY][startX] = 0;

    int dx[] = {-1, 1, 0, 0};
    int dy[] = {0, 0, -1, 1};

    while (!openSet.empty()) {
        Node current = openSet.top();
        openSet.pop();

        if (current.x == goalX && current.y == goalY) break;

        closedSet[current.y][current.x] = true;

        for (int i = 0; i < 4; i++) {
            int nx = current.x + dx[i];
            int ny = current.y + dy[i];

            if (nx < 0 || ny < 0 || nx >= 6 || ny >= 6 || arraything[ny][nx] == 1 || closedSet[ny][nx])
                continue;

            float newCost = costSoFar[current.y][current.x] + 1;
            if (newCost < costSoFar[ny][nx]) {
                costSoFar[ny][nx] = newCost;
                float priority = newCost + heuristic(nx, ny, goalX, goalY);
                openSet.push({nx, ny, newCost, priority});
                cameFrom[ny][nx] = current.y * 6 + current.x;
            }
        }
    }

    std::vector<std::pair<int, int>> path;
    for (int x = goalX, y = goalY; x != startX || y != startY;) {
        path.emplace_back(x, y);
        int prev = cameFrom[y][x];
        y = prev / 6;
        x = prev % 6;
    }
    std::reverse(path.begin(), path.end());
    return path;
}

// Heuristic function (Manhattan distance)
float heuristic(int x1, int y1, int x2, int y2) {
    return abs(x1 - x2) + abs(y1 - y2);
}

// Follow a calculated path
void navigatePath(std::vector<std::pair<int, int>> &path) {
    for (auto &[nextX, nextY] : path) {
        while (xcoordinate != nextX || ycoordinate != nextY) {
            if (isFrontOpen()) {
                moveForward();
            } else {
                obstacleAvoidance();
            }
        }
    }
}

// Check if front space is open
boolean isFrontOpen() {
    int nextX = xcoordinate, nextY = ycoordinate;
    if (robotDirection == 0) nextY--;
    if (robotDirection == 1) nextX++;
    if (robotDirection == 2) nextY++;
    if (robotDirection == 3) nextX--;

    return nextX >= 0 && nextY >= 0 && nextX < 6 && nextY < 6 && arraything[nextY][nextX] == 0;
}
